---
title: "Consumption Failed Event Documentation"
description: "Detailed documentation for the consumption_failed event"
---

This event is triggered when a consumption process fails in the system.

## Event Properties

| Property | Type | Required | Description |
|----------|------|----------|-------------|
| `error_code` | string | Yes | The specific error code that caused the failure |
| `error_message` | string | Yes | Human-readable error message |
| `retry_count` | number | No | Number of retry attempts made |
| `timestamp` | string | Yes | ISO 8601 timestamp of when the failure occurred |

## Implementation Examples

### Basic Usage

```javascript
jitsu.track('consumption_failed', {
  error_code: 'TIMEOUT_ERROR',
  error_message: 'Request timed out after 30 seconds',
  timestamp: new Date().toISOString()
});
```

### With Retry Information

```javascript
jitsu.track('consumption_failed', {
  error_code: 'NETWORK_ERROR',
  error_message: 'Failed to connect to upstream service',
  retry_count: 3,
  timestamp: new Date().toISOString(),
  // Additional context
  service_endpoint: 'https://api.example.com/consume',
  request_id: 'req_123456'
});
```

## Common Error Codes

- `TIMEOUT_ERROR`: Request exceeded the configured timeout
- `NETWORK_ERROR`: Network connectivity issues
- `VALIDATION_ERROR`: Input data failed validation
- `RATE_LIMIT_ERROR`: Rate limit exceeded
- `AUTHENTICATION_ERROR`: Authentication failed

## Best Practices

{% callout type="warning" title="Error Handling" %}
Always include both `error_code` and `error_message` to provide sufficient context for debugging and monitoring.
{% /callout %}

- Log this event immediately when a consumption failure occurs
- Include relevant context such as request IDs or service endpoints
- Use consistent error codes across your application
- Consider implementing exponential backoff for retryable errors

## Related Events

- `consumption_started`: Triggered when consumption begins
- `consumption_completed`: Triggered on successful completion
- `consumption_retried`: Triggered when a retry attempt is made