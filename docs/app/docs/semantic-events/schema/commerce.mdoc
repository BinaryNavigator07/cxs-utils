---
title: Commerce Event Properties
---

# Commerce Event Properties

The Commerce schema captures comprehensive transaction and financial information for semantic events. This schema supports detailed tracking of purchases, orders, payments, and all related commercial activities. Commerce properties work together with product information to provide complete transaction context.

Commerce events are essential for tracking business performance, customer behavior, revenue analytics, and operational insights across e-commerce, retail, and B2B scenarios.

## Commerce Properties

These properties capture transaction-level information including order details, financial totals, payment information, and business context.

### Transaction Identification

| Property | Type | Required | Description |
|----------|------|----------|-------------|
| `details` | String | No | Additional properties that cannot be mapped to schema or have complex data types |
| `checkout_id` | String | No | Unique identifier for the checkout process |
| `order_id` | String | No | Unique identifier for the order |
| `cart_id` | String | No | Unique identifier for the cart |
| `external_order_id` | String | No | External system's order identifier |

### Financial Information

| Property | Type | Required | Description |
|----------|------|----------|-------------|
| `revenue` | Float | No | Total gross revenue for the transaction |
| `tax` | Float | No | Total tax amount |
| `discount` | Float | No | Total discount amount applied |
| `cogs` | Float | No | Total cost of goods sold |
| `commission` | Float | No | Total commission amount |
| `currency` | String | No | Currency code (e.g., 'USD', 'EUR') |
| `exchange_rate` | Float | No | Currency exchange rate (default: 1.0) |
| `coupon` | String | No | Transaction coupon code |

### Payment Information

| Property | Type | Required | Description |
|----------|------|----------|-------------|
| `payment_type` | String | No | Payment method (e.g., 'Card', 'PayPal', 'Cash') |
| `payment_sub_type` | String | No | Payment subtype (e.g., 'Visa', 'Mastercard') |
| `payment_details` | String | No | Payment details (e.g., last 4 digits of card) |

### Business Context

| Property | Type | Required | Description |
|----------|------|----------|-------------|
| `employee_id` | String | No | ID of employee working the terminal/register |
| `terminal_id` | String | No | Terminal/register identifier |
| `affiliation_id` | String | No | Affiliation identifier |
| `affiliation` | String | No | Store or affiliate name (e.g., 'Google Store') |
| `agent` | String | No | Sales agent name |
| `agent_id` | String | No | Sales agent identifier |
| `sold_location` | String | No | Location where sale occurred |
| `sold_location_id` | String | No | Location identifier |
| `business_day` | DateTime | No | Business day of the transaction |

### Product Information

| Property | Type | Required | Description |
|----------|------|----------|-------------|
| `products` | Array[Product] | No | Array of product objects involved in the transaction |

The `products` array contains detailed product information as documented in the [Product Schema](./product).

## Practical Examples

### E-commerce Order Completion
```javascript
jitsu.track('Order Completed', {
  commerce: {
    order_id: 'ORD-12345',
    checkout_id: 'CHK-67890',
    revenue: 299.99,
    tax: 24.00,
    discount: 30.00,
    currency: 'USD',
    coupon: 'SAVE10',
    payment_type: 'Card',
    payment_sub_type: 'Visa',
    affiliation: 'Online Store',
    products: [
      {
        product_id: 'LAPTOP-001',
        product: 'MacBook Pro 14"',
        brand: 'Apple',
        category: 'Electronics',
        units: 1,
        unit_price: 299.99,
        uom: 'piece'
      }
    ]
  }
});
```

### Retail Point-of-Sale Transaction
```javascript
jitsu.track('Purchase Completed', {
  commerce: {
    order_id: 'POS-78901',
    terminal_id: 'REG-001',
    employee_id: 'EMP-456',
    revenue: 45.67,
    tax: 3.65,
    currency: 'USD',
    payment_type: 'Cash',
    affiliation: 'Downtown Store',
    business_day: '2024-01-15T00:00:00Z',
    products: [
      {
        product_id: 'COFFEE-BLEND-001',
        product: 'House Blend Coffee',
        brand: 'Local Roasters',
        units: 2,
        unit_price: 12.99,
        uom: 'bag'
      },
      {
        product_id: 'PASTRY-001',
        product: 'Chocolate Croissant',
        units: 1,
        unit_price: 4.50,
        uom: 'piece'
      }
    ]
  }
});
```

### B2B Purchase Order
```javascript
jitsu.track('Purchase Order Created', {
  commerce: {
    order_id: 'PO-2024-001',
    external_order_id: 'ERP-789456',
    revenue: 15000.00,
    currency: 'USD',
    agent: 'Sarah Johnson',
    agent_id: 'SALES-001',
    products: [
      {
        product_id: 'STEEL-BEAM-001',
        product: 'H-Beam Steel 200mm',
        supplier: 'Industrial Steel Corp',
        units: 100,
        unit_price: 150.00,
        uom: 'piece'
      }
    ]
  }
});
```

### Subscription Commerce Event
```javascript
jitsu.track('Subscription Renewed', {
  commerce: {
    order_id: 'SUB-REN-001',
    revenue: 99.99,
    currency: 'USD',
    payment_type: 'Card',
    payment_sub_type: 'Mastercard',
    products: [
      {
        product_id: 'SAAS-PRO-MONTHLY',
        product: 'Professional Plan',
        brand: 'CloudSoft',
        units: 1,
        unit_price: 99.99,
        uom: 'subscription'
      }
    ]
  }
});
```

## Best Practices

1. **Complete Transaction Context**: Include all relevant identifiers (`order_id`, `checkout_id`, `cart_id`) to enable cross-event tracking
2. **Accurate Financial Data**: Ensure `revenue`, `tax`, and `discount` values are precise and consistent
3. **Payment Details**: Capture payment method information for fraud detection and customer preference analysis
4. **Business Context**: Include `affiliation`, `agent`, and location information for operational insights
5. **Product Integration**: Use the `products` array to capture detailed line-item information
6. **Currency Consistency**: Always specify `currency` and use `exchange_rate` for multi-currency scenarios
7. **Employee Attribution**: Track `employee_id` and `terminal_id` for retail and POS scenarios

## Related Resources

- **[Event Bible](/docs/semantic-events/bible)**: Browse commerce-related events like "Order Completed", "Product Added", and "Checkout Started" with complete implementation examples
- **[Product Schema](./product)**: Detailed documentation for product properties used in commerce events
- **[Core Event Schema](./core)**: Understanding the fundamental event properties that work with commerce data
