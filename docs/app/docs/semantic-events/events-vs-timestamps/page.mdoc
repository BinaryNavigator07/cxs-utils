---
title: Events vs Timestamps
description: Learn why events should be first-class citizens rather than reduced to simple timestamp fields
---

# Events vs Timestamps in Context Suite

Understanding the fundamental difference between event-driven and timestamp-driven data models is crucial for implementing effective semantic event tracking. Context Suite promotes treating events as first-class citizens rather than reducing them to simple state changes.

{% callout type="info" title="Core Principle" %}
Events capture the full story of what happened, while timestamps only tell you when something changed. Rich events enable better analysis, machine learning, and business intelligence.
{% /callout %}

## Events as First-Class Citizens

In Context Suite, events should be treated as "first-class citizens" rather than being reduced to simple timestamp fields. This represents a fundamental shift in how we think about data modeling and business intelligence.

### The Traditional Problem

Most systems reduce rich business events to simple timestamp fields, losing valuable context and making analysis difficult. This timestamp-centric approach treats events as mere side effects of state changes rather than valuable data in their own right.

### The Context Suite Solution

Instead of timestamps, Context Suite promotes explicit, rich events that capture the complete context of business interactions. Each event becomes a comprehensive record that can be analyzed, linked, and used for advanced analytics.

## Traditional Approach vs Context Suite

### Traditional Approach (State-Based)

In traditional systems, changes are often represented as timestamp fields:

```json
{
  "id": "product_123",
  "name": "Wireless Headphones",
  "status": "published",
  "created_at": "2025-06-06T17:32:44-04:00",
  "updated_at": "2025-06-06T17:32:46-04:00",
  "published_at": "2025-06-06T17:31:23-04:00"
}
```

**Problems with this approach:**
- **Lost Context**: Who made the change? Why was it made?
- **Limited Analysis**: Can't understand the sequence of events
- **No Relationships**: Can't link related events together
- **Poor ML Training**: Insufficient data for machine learning models

### Context Suite Approach (Event-Based)

Instead of timestamps, Context Suite promotes explicit events with rich context:

```json
{
  "event": "product_created",
  "timestamp": "2025-06-06T17:32:44-04:00",
  "entity_gid": "prod_550e8400-e29b-41d4-a716-446655440000",
  "involves": [
    {
      "entity_type": "Product",
      "id": "product_123",
      "role": "Source",
      "label": "Wireless Headphones"
    },
    {
      "entity_type": "User",
      "id": "user_456",
      "role": "Creator",
      "label": "John Smith"
    },
    {
      "entity_type": "Category",
      "id": "cat_electronics",
      "role": "Classification",
      "label": "Electronics"
    }
  ],
  "properties": {
    "product_name": "Wireless Headphones",
    "category": "Electronics",
    "initial_price": 199.99,
    "currency": "USD",
    "creation_method": "bulk_import"
  },
  "context": {
    "source": "admin_dashboard",
    "user_agent": "Mozilla/5.0...",
    "ip_address": "192.168.1.100"
  }
}
```

{% callout type="success" title="Rich Context Benefits" %}
This event-based approach captures who, what, when, where, why, and how - providing complete context for analysis and decision-making.
{% /callout %}

## The Problem with Timestamp Reduction

When you see timestamp fields like `created_at`, `updated_at`, or `published_at`, you should recognize these as **"events reduced to state changes."** This reduction causes several problems:

### 1. Context Loss

```json
// Timestamp approach - minimal context
{
  "updated_at": "2025-06-06T17:32:46-04:00"
}

// Event approach - rich context
{
  "event": "product_updated",
  "timestamp": "2025-06-06T17:32:46-04:00",
  "properties": {
    "fields_changed": ["price", "description"],
    "previous_price": 199.99,
    "new_price": 179.99,
    "change_reason": "promotional_discount"
  },
  "involves": [
    {
      "entity_type": "User",
      "id": "user_789",
      "role": "Editor",
      "label": "Marketing Manager"
    }
  ]
}
```

### 2. Analysis Limitations

**Timestamp-based questions you can't answer:**
- Who made the change?
- What specifically changed?
- Why was the change made?
- What was the impact of the change?
- How does this relate to other events?

**Event-based questions you can answer:**
- Complete audit trail of all changes
- User behavior patterns and workflows
- Impact analysis of specific changes
- Correlation between events and outcomes
- Predictive modeling based on event sequences

### 3. Relationship Blindness

```json
// Timestamps can't show relationships
{
  "order_id": "order_123",
  "created_at": "2025-06-06T17:32:44-04:00",
  "updated_at": "2025-06-06T17:35:22-04:00"
}

// Events show rich relationships
{
  "event": "order_status_updated",
  "involves": [
    {
      "entity_type": "Order",
      "id": "order_123",
      "role": "Source"
    },
    {
      "entity_type": "User",
      "id": "customer_456",
      "role": "Customer"
    },
    {
      "entity_type": "User",
      "id": "agent_789",
      "role": "Processor"
    },
    {
      "entity_type": "Warehouse",
      "id": "warehouse_west",
      "role": "FulfillmentCenter"
    }
  ],
  "properties": {
    "previous_status": "processing",
    "new_status": "shipped",
    "tracking_number": "1Z999AA1234567890"
  }
}
```

{% callout type="warning" title="Data Quality Impact" %}
Timestamp reduction significantly impacts data quality and analytical capabilities. Events provide the foundation for advanced analytics, machine learning, and business intelligence.
{% /callout %}

## Understanding Roles in the Involves Structure

The `role` field in the `involves` structure is particularly important and often misunderstood. It's a key differentiator in semantic event modeling.

### Role vs. Entity Type

Understanding the distinction between these two concepts is crucial:

| Concept | Purpose | Example |
|---------|---------|---------|
| **Entity Type** | Describes what the entity *is* | "Person", "Product", "Order" |
| **Role** | Describes how the entity is *involved* in this specific event | "Driver", "PurchasedItem", "Transaction" |

{% callout type="info" title="Key Insight" %}
The role field rarely repeats the entity type. Instead, it explains the entity's specific involvement or function in the event context.
{% /callout %}

### Real-World Examples

#### Car Crash Event Example

In a car crash event, multiple entities might be of type "Person" but have different roles:

```json
{
  "event": "vehicle_accident_occurred",
  "involves": [
    {
      "entity_type": "Person",
      "id": "person_123",
      "role": "Driver",
      "label": "John Smith"
    },
    {
      "entity_type": "Person", 
      "id": "person_456",
      "role": "Pedestrian",
      "label": "Jane Doe"
    },
    {
      "entity_type": "Person",
      "id": "person_789", 
      "role": "Witness",
      "label": "Bob Johnson"
    },
    {
      "entity_type": "Vehicle",
      "id": "vehicle_abc",
      "role": "PrimaryVehicle",
      "label": "2023 Honda Civic"
    },
    {
      "entity_type": "Vehicle",
      "id": "vehicle_def",
      "role": "SecondaryVehicle", 
      "label": "2022 Toyota Camry"
    }
  ]
}
```

#### E-Commerce Order Example

In an order-related event:

```json
{
  "event": "order_completed",
  "involves": [
    {
      "entity_type": "User",
      "id": "user_123",
      "role": "Purchaser",
      "label": "Alice Johnson"
    },
    {
      "entity_type": "User",
      "id": "user_456", 
      "role": "Recipient",
      "label": "Bob Johnson"
    },
    {
      "entity_type": "Product",
      "id": "prod_789",
      "role": "PurchasedItem",
      "label": "Wireless Headphones"
    },
    {
      "entity_type": "Order",
      "id": "order_abc",
      "role": "Transaction",
      "label": "Order #12345"
    },
    {
      "entity_type": "PaymentMethod",
      "id": "card_def",
      "role": "PaymentInstrument",
      "label": "Visa ending in 1234"
    }
  ]
}
```

### Special Roles in Context Suite

Context Suite defines several special roles with specific meanings:

#### Source Role

- **Definition**: The entity that triggered or initiated the event
- **Usage**: Use "Source" to indicate the primary entity responsible for the event occurring
- **Example**: When a Product Variant is updated, the Variant is the "Source"

```json
{
  "event": "product_variant_updated",
  "involves": [
    {
      "label": "Blue Large T-Shirt",
      "role": "Source",
      "entity_type": "ProductVariant",
      "id": "54880761119045",
      "id_type": "Shopify"
    }
  ]
}
```

#### Parent Role

- **Definition**: Indicates a hierarchical relationship between entities
- **Usage**: Use "Parent" to establish entity hierarchies and relationships
- **Example**: When a Product Variant event occurs, the associated Product is the "Parent"

```json
{
  "event": "product_variant_updated",
  "involves": [
    {
      "label": "Blue Large T-Shirt",
      "role": "Source",
      "entity_type": "ProductVariant", 
      "id": "54880761119045",
      "id_type": "Shopify"
    },
    {
      "label": "Cotton T-Shirt",
      "role": "Parent",
      "entity_type": "Product",
      "id": "15100602155333", 
      "id_type": "Shopify"
    }
  ]
}
```

#### Additional Common Roles

| Role | Description | Common Usage |
|------|-------------|--------------|
| **Target** | The entity being acted upon | User being messaged, product being viewed |
| **Owner** | The entity that owns or controls another | Account owner, content creator |
| **Operator** | The entity performing an action | System user, automated process |
| **Beneficiary** | The entity that benefits from the action | Gift recipient, service subscriber |
| **Mediator** | The entity facilitating the interaction | Payment processor, delivery service |
| **Classifier** | The entity providing categorization | Product category, content tag |

{% callout type="success" title="Role Consistency" %}
Maintain consistency in role naming across your events. Document your role definitions to ensure team alignment and enable better analysis.
{% /callout %}

## IDs and References

When you see `_id` fields (like `inventory_item_id`, `user_id`, `product_id`), these should be thought of as references to other entities that should be included in the `involves` structure.

### Traditional ID Approach

```json
{
  "event": "inventory_updated",
  "inventory_item_id": "54319739470149",
  "user_id": "user_123",
  "product_id": "prod_456"
}
```

**Problems:**
- No context about relationships
- Can't understand entity roles
- Difficult to query across relationships
- Limited analytical capabilities

### Context Suite Involves Approach

```json
{
  "event": "inventory_updated",
  "involves": [
    {
      "label": "Wireless Headphones - Black",
      "role": "InventoryItem",
      "entity_type": "InventoryItem", 
      "id": "54319739470149",
      "id_type": "Shopify"
    },
    {
      "label": "John Smith",
      "role": "Operator",
      "entity_type": "User",
      "id": "user_123",
      "id_type": "Internal"
    },
    {
      "label": "Wireless Headphones",
      "role": "Product",
      "entity_type": "Product",
      "id": "prod_456", 
      "id_type": "Shopify"
    }
  ],
  "properties": {
    "previous_quantity": 50,
    "new_quantity": 45,
    "change_reason": "sale",
    "adjustment_type": "decrease"
  }
}
```

**Benefits:**
- Clear entity relationships
- Rich context about involvement
- Queryable relationship structure
- Enhanced analytical capabilities

### Migration Strategy

When migrating from ID fields to the involves structure:

```javascript title="migration-example.js"
// Before: ID-based approach
const oldEvent = {
  event: 'order_updated',
  order_id: 'order_123',
  customer_id: 'user_456',
  product_ids: ['prod_789', 'prod_012']
};

// After: Involves-based approach
const newEvent = {
  event: 'order_updated',
  involves: [
    {
      entity_type: 'Order',
      id: 'order_123',
      role: 'Source',
      label: 'Order #12345'
    },
    {
      entity_type: 'User', 
      id: 'user_456',
      role: 'Customer',
      label: 'Alice Johnson'
    },
    {
      entity_type: 'Product',
      id: 'prod_789', 
      role: 'OrderItem',
      label: 'Wireless Headphones'
    },
    {
      entity_type: 'Product',
      id: 'prod_012',
      role: 'OrderItem', 
      label: 'Phone Case'
    }
  ]
};
```

{% callout type="warning" title="Migration Considerations" %}
When migrating from ID fields to involves structures, ensure you maintain backward compatibility and gradually transition your analytics and reporting systems.
{% /callout %}

## Benefits of the Event-Centric Approach

### 1. Complete Context

Each event carries comprehensive information about what happened:

```json
{
  "event": "product_price_changed",
  "timestamp": "2025-06-06T17:32:46-04:00",
  "involves": [
    {
      "entity_type": "Product",
      "id": "prod_123",
      "role": "Source"
    },
    {
      "entity_type": "User", 
      "id": "user_456",
      "role": "PriceManager"
    }
  ],
  "properties": {
    "previous_price": 199.99,
    "new_price": 179.99,
    "currency": "USD",
    "change_percentage": -10.0,
    "change_reason": "promotional_discount",
    "promotion_id": "summer_sale_2024"
  },
  "context": {
    "source": "admin_dashboard",
    "automated": false,
    "approval_required": true
  }
}
```

### 2. Rich Relationships

Events explicitly link to all involved entities with clear roles:

```json
{
  "event": "support_ticket_resolved",
  "involves": [
    {
      "entity_type": "SupportTicket",
      "id": "ticket_789",
      "role": "Source"
    },
    {
      "entity_type": "User",
      "id": "customer_123", 
      "role": "Reporter"
    },
    {
      "entity_type": "User",
      "id": "agent_456",
      "role": "Resolver"
    },
    {
      "entity_type": "Product",
      "id": "prod_789",
      "role": "Subject"
    }
  ]
}
```

### 3. Better Analysis Capabilities

**Traditional timestamp analysis:**
- When did things happen?
- How many things happened?

**Event-based analysis:**
- Who performed what actions?
- What was the sequence of events?
- How do events relate to each other?
- What patterns emerge from event sequences?
- Which entities are most involved in specific processes?

### 4. AI/ML Readiness

Events provide rich features for machine learning:

```json
{
  "event": "customer_churn_risk_detected",
  "involves": [
    {
      "entity_type": "User",
      "id": "user_123",
      "role": "Subject"
    }
  ],
  "properties": {
    "risk_score": 0.85,
    "days_since_last_login": 30,
    "support_tickets_count": 3,
    "recent_purchase_decline": true,
    "engagement_score": 0.2
  },
  "ml_features": {
    "model_version": "churn_v2.1",
    "feature_importance": {
      "days_since_last_login": 0.4,
      "support_tickets_count": 0.3,
      "engagement_score": 0.3
    }
  }
}
```

### 5. Temporal Understanding

Events can be properly sequenced and understood in context:

```json
// Event sequence showing customer journey
[
  {
    "event": "user_registered",
    "timestamp": "2025-06-01T10:00:00Z"
  },
  {
    "event": "product_viewed", 
    "timestamp": "2025-06-01T10:05:00Z"
  },
  {
    "event": "product_added_to_cart",
    "timestamp": "2025-06-01T10:07:00Z"
  },
  {
    "event": "checkout_abandoned",
    "timestamp": "2025-06-01T10:15:00Z"
  },
  {
    "event": "email_campaign_sent",
    "timestamp": "2025-06-02T09:00:00Z"
  },
  {
    "event": "order_completed",
    "timestamp": "2025-06-02T14:30:00Z"
  }
]
```

{% callout type="success" title="Analytical Power" %}
This event-centric approach provides a much richer foundation for analysis, especially for AI/ML systems that benefit from fully enriched and linked events.
{% /callout %}

## Practical Application Guidelines

When designing systems with Context Suite, follow these principles:

### 1. Convert Timestamps to Events

**Instead of:**
```sql
UPDATE products 
SET updated_at = NOW() 
WHERE id = 123;
```

**Do this:**
```javascript
cxs.track('product_updated', {
  involves: [
    {
      entity_type: 'Product',
      id: '123',
      role: 'Source'
    },
    {
      entity_type: 'User',
      id: 'user_456', 
      role: 'Editor'
    }
  ],
  properties: {
    fields_changed: ['price', 'description'],
    change_reason: 'inventory_update'
  }
});
```

### 2. Use Rich Involves Structures

Always link all relevant entities with meaningful roles:

```javascript title="rich-involves.js"
cxs.track('order_shipped', {
  involves: [
    {
      entity_type: 'Order',
      id: 'order_123',
      role: 'Source',
      label: 'Order #12345'
    },
    {
      entity_type: 'User',
      id: 'customer_456',
      role: 'Recipient', 
      label: 'Alice Johnson'
    },
    {
      entity_type: 'Warehouse',
      id: 'warehouse_west',
      role: 'FulfillmentCenter',
      label: 'West Coast Warehouse'
    },
    {
      entity_type: 'Carrier',
      id: 'fedex',
      role: 'ShippingCarrier',
      label: 'FedEx'
    },
    {
      entity_type: 'User',
      id: 'agent_789',
      role: 'Processor',
      label: 'Shipping Agent'
    }
  ],
  properties: {
    tracking_number: '1Z999AA1234567890',
    shipping_method: 'ground',
    estimated_delivery: '2025-06-10',
    package_count: 1,
    total_weight: 2.5
  }
});
```

### 3. Assign Meaningful Roles

Roles should describe involvement, not just entity types:

```javascript title="meaningful-roles.js"
// Good - Descriptive roles
{
  entity_type: 'User',
  role: 'PurchaseDecisionMaker'
}

{
  entity_type: 'Product', 
  role: 'RecommendedAlternative'
}

{
  entity_type: 'Campaign',
  role: 'AttributionSource'
}

// Avoid - Generic or repeated roles
{
  entity_type: 'User',
  role: 'User' // Too generic
}

{
  entity_type: 'Product',
  role: 'Product' // Just repeats entity type
}
```

### 4. Include Complete Context

Make sure events contain all necessary context for analysis:

```javascript title="complete-context.js"
cxs.track('feature_used', {
  involves: [
    {
      entity_type: 'User',
      id: 'user_123',
      role: 'Actor'
    },
    {
      entity_type: 'Feature',
      id: 'advanced_search',
      role: 'Subject'
    }
  ],
  properties: {
    feature_name: 'advanced_search',
    feature_category: 'search',
    usage_duration: 45,
    success: true,
    user_plan: 'premium',
    previous_usage_count: 12
  },
  context: {
    page: '/search',
    session_id: 'sess_abc123',
    device_type: 'desktop',
    user_agent: 'Mozilla/5.0...'
  }
});
```

### 5. Think Events First

Design your system around events, not state changes:

```javascript title="events-first.js"
// Event-driven approach
class OrderService {
  async updateOrderStatus(orderId, newStatus, userId) {
    // Update the database
    await this.database.updateOrder(orderId, { status: newStatus });
    
    // Fire the semantic event
    await this.analytics.track('order_status_updated', {
      involves: [
        {
          entity_type: 'Order',
          id: orderId,
          role: 'Source'
        },
        {
          entity_type: 'User',
          id: userId,
          role: 'Operator'
        }
      ],
      properties: {
        new_status: newStatus,
        previous_status: await this.getPreviousStatus(orderId),
        update_reason: 'manual_update'
      }
    });
  }
}
```

{% callout type="info" title="Implementation Strategy" %}
Start by identifying your most important business events and gradually convert timestamp-based tracking to rich semantic events. Focus on events that drive key business decisions first.
{% /callout %}

## Common Anti-Patterns to Avoid

### 1. Timestamp-Only Tracking

```javascript
// Avoid - Timestamp-only approach
{
  "user_id": "123",
  "last_login": "2025-06-06T10:30:00Z",
  "last_purchase": "2025-06-05T14:22:00Z"
}

// Better - Event-based approach
[
  {
    "event": "user_logged_in",
    "timestamp": "2025-06-06T10:30:00Z",
    "involves": [{"entity_type": "User", "id": "123", "role": "Actor"}]
  },
  {
    "event": "order_completed", 
    "timestamp": "2025-06-05T14:22:00Z",
    "involves": [{"entity_type": "User", "id": "123", "role": "Purchaser"}]
  }
]
```

### 2. Generic Roles

```javascript
// Avoid - Generic roles
{
  "entity_type": "User",
  "role": "User"
}

// Better - Specific roles
{
  "entity_type": "User", 
  "role": "ContentCreator"
}
```

### 3. Missing Context

```javascript
// Avoid - Minimal context
{
  "event": "product_updated"
}

// Better - Rich context
{
  "event": "product_updated",
  "involves": [...],
  "properties": {
    "fields_changed": ["price"],
    "change_reason": "competitor_pricing"
  }
}
```

## Conclusion

The event-centric approach provides a much richer foundation for analysis, especially for AI/ML systems that benefit from fully enriched and linked events. By treating events as first-class citizens rather than reducing them to timestamps, you enable:

- **Complete audit trails** with full context
- **Rich relationship modeling** between entities
- **Advanced analytics** and machine learning capabilities
- **Better business intelligence** and decision-making
- **Improved customer understanding** and personalization

{% callout type="success" title="Transform Your Data Model" %}
Moving from timestamp-based to event-based data modeling is a transformative change that unlocks the full potential of your business data for analytics, AI, and decision-making.
{% /callout %}

## Next Steps

- **[Entity Roles](/docs/entities/roles)** - Deep dive into entity role modeling
- **[Event Validation](/docs/semantic-events/validation)** - Ensure your events are properly structured
- **[Best Practices](/docs/semantic-events/best-practices)** - Advanced implementation guidelines
- **[Schema Reference](/docs/semantic-events/schema/all)** - Complete event schema documentation