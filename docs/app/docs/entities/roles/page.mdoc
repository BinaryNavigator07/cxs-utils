---
title: Entity Roles
description: Learn about entity roles and how they differ from entity types in Context Suite
---

# Understanding Entity Roles

## Introduction to Roles

In Context Suite, the `role` field within the `involves` structure is a crucial concept that is often misunderstood. While it may seem similar to the `entity_type` field, they serve distinct purposes in the system:

- **Entity Type**: Describes what the entity *is* (e.g., "Person", "Product", "ProductVariant")
- **Role**: Describes how the entity is *involved* in a specific event (its function or purpose in that context)

The role field rarely repeats the entity type. Instead, it explains the entity's specific involvement or relationship to the event.

{% callout type="info" title="Key Distinction" %}
Think of entity type as the "noun" (what something is) and role as the "verb" or "function" (what something does in this specific context).
{% /callout %}

## Key Characteristics of Roles

1. **Context-Specific**: Roles are specific to the context of the event and may change from event to event
2. **Function-Based**: Roles describe the function or purpose of the entity in the event
3. **Abstract When Possible**: Roles should be abstract enough to be reusable across different scenarios
4. **Event-Dependent**: The same entity can have different roles in different events

{% callout type="success" title="Reusability" %}
Well-designed roles can be reused across multiple event types, making your schema more consistent and easier to understand.
{% /callout %}

## Examples of Roles

### Car Crash Event Example

In a car crash event, multiple entities might be of type "Person" but have different roles:

| Entity Type | Role | Description |
|-------------|------|-------------|
| Person | Driver | The person operating the vehicle |
| Person | Pedestrian | A person on foot involved in the incident |
| Person | Witness | A person who observed the incident |
| Vehicle | Involved | The primary vehicle in the crash |
| Vehicle | Secondary | Another vehicle indirectly involved |

{% callout type="info" title="Role Clarity" %}
Notice how the roles clearly distinguish the function of each entity in the event, even when multiple entities share the same type.
{% /callout %}

### E-Commerce Example

In an order-related event:

| Entity Type | Role | Description |
|-------------|------|-------------|
| User | Purchaser | The person making the purchase |
| User | Recipient | The person receiving the items (may be different) |
| Product | Item | The product being purchased |
| Order | Transaction | The order transaction itself |

### Content Management Example

In a content publishing event:

| Entity Type | Role | Description |
|-------------|------|-------------|
| User | Author | The person who created the content |
| User | Editor | The person who reviewed and edited |
| User | Publisher | The person who approved publication |
| Content | Article | The main content being published |
| Category | Classification | The category the content belongs to |

## Special Roles

Some roles have specific meanings in the Context Suite system:

### Source Role

- **Definition**: The entity that triggered or initiated the event
- **Example**: When a Product Variant is updated, the Variant is the "Source" of the "Product Variant Updated" event
- **Usage**: Use "Source" to indicate the primary entity responsible for the event occurring

```json
"involves": [
  {
    "label": "Default Title",
    "role": "Source",
    "entity_type": "ProductVariant",
    "id": "54880761119045",
    "id_type": "Shopify"
  }
]
```

{% callout type="warning" title="Source Role Usage" %}
The "Source" role should only be used for the primary entity that directly caused or triggered the event. Avoid using it for secondary or related entities.
{% /callout %}

### Parent Role

- **Definition**: Indicates a hierarchical relationship between entities
- **Example**: When a Product Variant event occurs, the associated Product is the "Parent"
- **Usage**: Use "Parent" to establish entity hierarchies and relationships

```json
"involves": [
  {
    "label": "Default Title",
    "role": "Source",
    "entity_type": "ProductVariant",
    "id": "54880761119045",
    "id_type": "Shopify"
  },
  {
    "label": "The test snowboard",
    "role": "Parent",
    "entity_type": "Product",
    "id": "15100602155333",
    "id_type": "Shopify"
  }
]
```

### Additional Common Roles

| Role | Description | Common Usage |
|------|-------------|--------------|
| Target | The entity being acted upon | User being messaged, product being viewed |
| Owner | The entity that owns or controls another | Account owner, content creator |
| Operator | The entity performing an action | System user, automated process |
| Beneficiary | The entity that benefits from the action | Gift recipient, service subscriber |
| Mediator | The entity facilitating the interaction | Payment processor, delivery service |

{% callout type="info" title="Role Consistency" %}
Maintain consistency in role naming across your events. Document your role definitions to ensure team alignment.
{% /callout %}

## Best Practices for Roles

### 1. Be Specific and Descriptive

Choose roles that clearly communicate the entity's function in the event:

```json
// Good - Clear and specific
"role": "PrimaryBidder"
"role": "WinningBidder" 
"role": "AuctionItem"

// Avoid - Too generic
"role": "User"
"role": "Item"
"role": "Entity"
```

### 2. Be Consistent Across Events

Use the same role names for similar functions across different event types:

```json
// Consistent across different events
"event": "message_sent"
"involves": [{"role": "Sender"}, {"role": "Recipient"}]

"event": "payment_transferred"  
"involves": [{"role": "Sender"}, {"role": "Recipient"}]
```

### 3. Avoid Entity Types as Roles

Don't simply repeat the entity type as the role:

```json
// Bad - Role just repeats entity type
{
  "entity_type": "Product",
  "role": "Product"
}

// Good - Role describes function
{
  "entity_type": "Product", 
  "role": "PurchasedItem"
}
```

### 4. Consider Context and Perspective

Adapt roles based on the event context rather than using generic labels:

```json
// Context: Shopping cart event
{
  "entity_type": "Product",
  "role": "AddedItem"
}

// Context: Inventory management event  
{
  "entity_type": "Product",
  "role": "StockItem"
}

// Context: Recommendation event
{
  "entity_type": "Product", 
  "role": "RecommendedItem"
}
```

### 5. Document Special Roles

Maintain documentation for any special or domain-specific roles used in your system:

```json
// Document domain-specific roles
{
  "role": "ListingAgent",      // Real estate: agent representing seller
  "role": "BuyingAgent",       // Real estate: agent representing buyer  
  "role": "PropertyInspector", // Real estate: professional inspector
  "role": "MortgageLender"     // Real estate: financing institution
}
```

{% callout type="success" title="Documentation Benefits" %}
Well-documented roles make your event schema self-documenting and easier for new team members to understand.
{% /callout %}

## Role Hierarchies and Relationships

### Hierarchical Roles

Some roles naturally form hierarchies:

```json
// Organizational hierarchy
"role": "TeamLead"     // Manages team members
"role": "TeamMember"   // Reports to team lead
"role": "Department"   // Contains teams

// Content hierarchy  
"role": "ParentCategory"  // Contains subcategories
"role": "Subcategory"     // Belongs to parent
"role": "TaggedContent"   // Associated with categories
```

### Complementary Roles

Some roles work in pairs or groups:

```json
// Transaction roles
"role": "Buyer"
"role": "Seller" 
"role": "Escrow"

// Communication roles
"role": "Sender"
"role": "Recipient"
"role": "CarbonCopy"

// Approval workflow roles
"role": "Requester"
"role": "Approver"
"role": "Implementer"
```

## Advanced Role Patterns

### Multi-Role Entities

Sometimes an entity can have multiple roles in the same event:

```json
"involves": [
  {
    "entity_type": "User",
    "id": "user_123",
    "role": "Author"
  },
  {
    "entity_type": "User", 
    "id": "user_123",
    "role": "Publisher"  // Same user, different role
  }
]
```

### Conditional Roles

Roles that depend on event conditions:

```json
// Role changes based on event outcome
"event": "auction_ended"
"involves": [
  {
    "entity_type": "User",
    "role": "WinningBidder"  // Only if they won
  },
  {
    "entity_type": "User", 
    "role": "OutbidParticipant"  // If they participated but lost
  }
]
```

{% callout type="warning" title="Complexity Management" %}
While advanced patterns can be powerful, avoid over-complicating your role structure. Aim for clarity and maintainability.
{% /callout %}

## Benefits of Well-Defined Roles

- **Better Analysis**: Properly defined roles enable more nuanced analysis of events
- **Clear Relationships**: Roles clearly establish the relationships between entities
- **Improved Filtering**: Events can be filtered based on entity roles, not just types
- **Enhanced Context**: Events carry more semantic meaning about entity involvement
- **Flexible Querying**: Analysts can query for specific entity functions across events
- **Better Reporting**: Reports can focus on entity behaviors rather than just entity existence

{% callout type="success" title="Analytics Power" %}
Well-defined roles unlock powerful analytics capabilities, allowing you to understand not just what entities were involved, but how they were involved in your business processes.
{% /callout %}

## Common Anti-Patterns to Avoid

### 1. Generic Roles

```json
// Avoid - Too generic
"role": "Entity"
"role": "Object" 
"role": "Thing"

// Better - Specific and meaningful
"role": "PurchasedProduct"
"role": "ViewedContent"
"role": "ProcessedOrder"
```

### 2. Technical Implementation Details

```json
// Avoid - Implementation details
"role": "DatabaseRecord"
"role": "APIResponse"
"role": "CacheEntry"

// Better - Business meaning
"role": "CustomerProfile" 
"role": "ProductCatalog"
"role": "UserPreferences"
```

### 3. Overly Complex Role Names

```json
// Avoid - Too complex
"role": "PrimaryUserWhoInitiatedTheTransactionAndIsResponsibleForPayment"

// Better - Concise but clear
"role": "TransactionInitiator"
"role": "PaymentResponsible"
```

By using roles effectively, you can create a richer semantic model of your business events and enable more sophisticated analysis and understanding of your data.